name: "Test"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

env:
  GO_VERSION: stable

permissions:
  pull-requests: write

jobs:
  go-test-coverage:
    name: "Go Test Coverage"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: go version

      - name: Generate test coverage
        run: |
          go test -race -count=1 -coverprofile=cover.out -covermode=atomic -coverpkg=./... ./...

      - name: Query base default-branch latest run_id (this workflow)
        if: github.event_name == 'pull_request'
        id: query
        env:
          BASE_REPO: ${{ github.repository }}
          BASE_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          id="$(curl -sSL \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${BASE_REPO}/actions/runs?branch=${BASE_DEFAULT_BRANCH}&event=push&status=completed&per_page=100" \
            | jq -r '[.workflow_runs[] | select(.conclusion == "success" and .path == ".github/workflows/test-coverage.yml")] | first | .id // empty')"
          if [ -n "$id" ]; then
              echo "RUN_ID=$id" >> "$GITHUB_OUTPUT"
          fi
          echo "::notice::RUN_ID=$id"

      - name: Download artifact (main.breakdown)
        if: github.event_name == 'pull_request'
        id: download-main-breakdown
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          name: main.breakdown
          run-id: ${{ steps.query.outputs.RUN_ID }}

      - name: Touch main.breakdown
        if: github.event_name == 'pull_request' && steps.download-main-breakdown.outcome == 'failure'
        run: |
          touch main.breakdown

      - name: Display structure of downloaded files
        if: github.event_name == 'pull_request'
        run: ls -R

      - name: Check test coverage
        id: coverage
        uses: vladopajic/go-test-coverage@v2
        continue-on-error: true # Should fail after coverage comment is posted
        with:
          profile: cover.out
          # threshold-file: 70
          # threshold-package: 80
          # threshold-total: 95
          breakdown-file-name: ${{ github.ref_name == 'main' && 'main.breakdown' || '' }}
          diff-base-breakdown-file-name: main.breakdown
          diff-threshold: null

      - name: Upload artifact (main.breakdown)
        if: github.event_name == 'push' && github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: main.breakdown
          path: main.breakdown # as specified via `breakdown-file-name`
          if-no-files-found: error

      - name: Post coverage report
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-tag: coverage-report
          pr-number: ${{ github.event.number }}
          message: |
            Go Test Coverage Report:
            ```
            ${{ fromJSON(steps.coverage.outputs.report) }}```

      - name: "Finally check coverage"
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1
